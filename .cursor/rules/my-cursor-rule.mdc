---
description: 
globs: 
alwaysApply: true
---
Project Scope:
You're building a full-stack recipe-keeping web application using Next.js 14 (App Router), PostgreSQL via Drizzle ORM, BetterAuth for authentication, and Tailwind CSS + Framer Motion for styling and animations. The frontend must be responsive and elegant, the backend must handle non-trivial logic, and the deployment process should support CI/CD.

# project-structure
/src
  /app
    /auth
      /sign-in/page.tsx
      /sign-up/page.tsx
    /dashboard/page.tsx
    /recipes
      /personal/create/page.tsx
  /components
    LatestRecipes.tsx
    RecipeCard.tsx
  /lib
    auth.ts (BetterAuth config)
    db.ts (Drizzle client)
    auth-client.ts
  /schema
    users.ts
    sessions.ts
    recipes.ts
    index.ts
  /api
    /client-auth/[...action]/route.ts
    /recipes/route.ts


## 📘 Cursor Implementation Rules for Social Recipe Binders

### 💻 Frontend/UI

```cursor
- [ ] Your HTML must be semantic and standards-compliant.
- [ ] Avoid deeply nested <div> structures; use layout components.
- [ ] All pages must be responsive from mobile to desktop.
- [ ] Maintain consistent component styling across all UI.
- [ ] Reuse atomic components in `src/components/ui` (e.g., Button, Input).
- [ ] Use framer-motion or Tailwind transitions for animation.
- [ ] Use at least one advanced UI feature: drag-and-drop or interactive editor.
```

### 🧠 Backend/Server

```cursor
- [ ] All API routes should live in `src/app/api/*` and follow RESTful naming.
- [ ] Validate all incoming requests with Zod.
- [ ] Use Drizzle ORM for all DB operations.
- [ ] Server must expose meaningful, centralized logic (not just CRUD).
- [ ] Connect to third-party APIs or handle multi-step flows (e.g., invite + share).
- [ ] Ensure custom logic lives in `/lib/server/`.
```

### 🔐 Authentication

```cursor
- [ ] Implement NextAuth v5 using Google OAuth + Email.
- [ ] Protect all pages in `/dashboard`, `/recipes`, `/binders` via middleware.
- [ ] Implement session checking in client with `authClient.getSession()`.
- [ ] Use role/permission checks to gate access to shared content.
- [ ] Enable sharing links with permission levels (view/edit/admin).
```

### 🚀 Deployment & DevOps

```cursor
- [ ] Set up CI with GitHub Actions to test & deploy.
- [ ] Push builds to Vercel (auto deploy via main branch).
- [ ] Define environment variables in `.env.local` and Vercel UI.
- [ ] Run `drizzle-kit push` in CI when schema updates.
- [ ] Include drizzle config in root: `drizzle.config.ts`.
```

### 🗂️ Database

```cursor
- [ ] All tables must include `created_at` and `updated_at` timestamps.
- [ ] Use UUIDs as primary keys.
- [ ] Set up cascade delete on FK relations (e.g. user -> binders).
- [ ] Recipes and steps should store structured JSON, not plain text.
- [ ] Schema should live in `src/schema/*`.
```

### 📦 Project Structure

```cursor
- [ ] Use Next.js App Router with layout.tsx and page.tsx.
- [ ] Structure code by domain: `/auth`, `/recipes`, `/binders`.
- [ ] Separate UI and logic layers (`lib`, `components`, `hooks`).
- [ ] All client-side interactions should live in `use client` components.
- [ ] Prefer server components by default.
```

### 🔁 State Management

```cursor
- [ ] Use React Context sparingly for global auth/session state.
- [ ] Use React hooks (`useEffect`, `useCallback`) for async logic.
- [ ] Handle loading and error states for all async operations.
- [ ] Optimistically update UI when mutations occur (e.g. create recipe).
```

### ⚙️ Features

```cursor
- [ ] Allow users to create/edit/delete recipes with metadata and images.
- [ ] Allow users to organize recipes into binders.
- [ ] Allow binder sharing via email or link.
- [ ] Implement permission levels (read/write/admin).
- [ ] Audit log for key actions (share, edit, delete).
```

### 🧪 QA and Logging

```cursor
- [ ] Use `console.log()` or custom logger for debugging (in dev only).
- [ ] Ensure all major flows have error boundaries and fallbacks.
- [ ] Provide visual feedback on errors, loading, and success.
- [ ] Validate that all routes and APIs are reachable post-deploy.
```

### ✅ Bonus (Optional for polish)

```cursor
- [ ] Use @uploadthing for image upload.
- [ ] Add search, filtering, and tagging to dashboard.
- [ ] Add light/dark theme toggle.
- [ ] Add test coverage for `auth.ts`, `routes`, and permission helpers.
- [ ] Use Vitest + MSW for frontend testing.