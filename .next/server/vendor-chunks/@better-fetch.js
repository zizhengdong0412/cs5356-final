"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@better-fetch";
exports.ids = ["vendor-chunks/@better-fetch"];
exports.modules = {

/***/ "(ssr)/./node_modules/@better-fetch/fetch/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@better-fetch/fetch/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetterFetchError: () => (/* binding */ BetterFetchError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   applySchemaPlugin: () => (/* binding */ applySchemaPlugin),\n/* harmony export */   betterFetch: () => (/* binding */ betterFetch),\n/* harmony export */   bodyParser: () => (/* binding */ bodyParser),\n/* harmony export */   createFetch: () => (/* binding */ createFetch),\n/* harmony export */   createRetryStrategy: () => (/* binding */ createRetryStrategy),\n/* harmony export */   createSchema: () => (/* binding */ createSchema),\n/* harmony export */   detectContentType: () => (/* binding */ detectContentType),\n/* harmony export */   detectResponseType: () => (/* binding */ detectResponseType),\n/* harmony export */   getBody: () => (/* binding */ getBody),\n/* harmony export */   getFetch: () => (/* binding */ getFetch),\n/* harmony export */   getHeaders: () => (/* binding */ getHeaders),\n/* harmony export */   getMethod: () => (/* binding */ getMethod),\n/* harmony export */   getTimeout: () => (/* binding */ getTimeout),\n/* harmony export */   getURL: () => (/* binding */ getURL),\n/* harmony export */   initializePlugins: () => (/* binding */ initializePlugins),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isJSONParsable: () => (/* binding */ isJSONParsable),\n/* harmony export */   isJSONSerializable: () => (/* binding */ isJSONSerializable),\n/* harmony export */   isPayloadMethod: () => (/* binding */ isPayloadMethod),\n/* harmony export */   isRouteMethod: () => (/* binding */ isRouteMethod),\n/* harmony export */   jsonParse: () => (/* binding */ jsonParse),\n/* harmony export */   methods: () => (/* binding */ methods),\n/* harmony export */   parseStandardSchema: () => (/* binding */ parseStandardSchema)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\n// src/error.ts\nvar BetterFetchError = class extends Error {\n    constructor(status, statusText, error){\n        super(statusText || status.toString(), {\n            cause: error\n        });\n        this.status = status;\n        this.statusText = statusText;\n        this.error = error;\n    }\n};\n// src/plugins.ts\nvar initializePlugins = async (url, options)=>{\n    var _a, _b, _c, _d, _e, _f;\n    let opts = options || {};\n    const hooks = {\n        onRequest: [\n            options == null ? void 0 : options.onRequest\n        ],\n        onResponse: [\n            options == null ? void 0 : options.onResponse\n        ],\n        onSuccess: [\n            options == null ? void 0 : options.onSuccess\n        ],\n        onError: [\n            options == null ? void 0 : options.onError\n        ],\n        onRetry: [\n            options == null ? void 0 : options.onRetry\n        ]\n    };\n    if (!options || !(options == null ? void 0 : options.plugins)) {\n        return {\n            url,\n            options: opts,\n            hooks\n        };\n    }\n    for (const plugin of (options == null ? void 0 : options.plugins) || []){\n        if (plugin.init) {\n            const pluginRes = await ((_a = plugin.init) == null ? void 0 : _a.call(plugin, url.toString(), options));\n            opts = pluginRes.options || opts;\n            url = pluginRes.url;\n        }\n        hooks.onRequest.push((_b = plugin.hooks) == null ? void 0 : _b.onRequest);\n        hooks.onResponse.push((_c = plugin.hooks) == null ? void 0 : _c.onResponse);\n        hooks.onSuccess.push((_d = plugin.hooks) == null ? void 0 : _d.onSuccess);\n        hooks.onError.push((_e = plugin.hooks) == null ? void 0 : _e.onError);\n        hooks.onRetry.push((_f = plugin.hooks) == null ? void 0 : _f.onRetry);\n    }\n    return {\n        url,\n        options: opts,\n        hooks\n    };\n};\n// src/retry.ts\nvar LinearRetryStrategy = class {\n    constructor(options){\n        this.options = options;\n    }\n    shouldAttemptRetry(attempt, response) {\n        if (this.options.shouldRetry) {\n            return Promise.resolve(attempt < this.options.attempts && this.options.shouldRetry(response));\n        }\n        return Promise.resolve(attempt < this.options.attempts);\n    }\n    getDelay() {\n        return this.options.delay;\n    }\n};\nvar ExponentialRetryStrategy = class {\n    constructor(options){\n        this.options = options;\n    }\n    shouldAttemptRetry(attempt, response) {\n        if (this.options.shouldRetry) {\n            return Promise.resolve(attempt < this.options.attempts && this.options.shouldRetry(response));\n        }\n        return Promise.resolve(attempt < this.options.attempts);\n    }\n    getDelay(attempt) {\n        const delay = Math.min(this.options.maxDelay, this.options.baseDelay * 2 ** attempt);\n        return delay;\n    }\n};\nfunction createRetryStrategy(options) {\n    if (typeof options === \"number\") {\n        return new LinearRetryStrategy({\n            type: \"linear\",\n            attempts: options,\n            delay: 1e3\n        });\n    }\n    switch(options.type){\n        case \"linear\":\n            return new LinearRetryStrategy(options);\n        case \"exponential\":\n            return new ExponentialRetryStrategy(options);\n        default:\n            throw new Error(\"Invalid retry strategy\");\n    }\n}\n// src/auth.ts\nvar getAuthHeader = async (options)=>{\n    const headers = {};\n    const getValue = async (value)=>typeof value === \"function\" ? await value() : value;\n    if (options == null ? void 0 : options.auth) {\n        if (options.auth.type === \"Bearer\") {\n            const token = await getValue(options.auth.token);\n            if (!token) {\n                return headers;\n            }\n            headers[\"authorization\"] = `Bearer ${token}`;\n        } else if (options.auth.type === \"Basic\") {\n            const username = getValue(options.auth.username);\n            const password = getValue(options.auth.password);\n            if (!username || !password) {\n                return headers;\n            }\n            headers[\"authorization\"] = `Basic ${btoa(`${username}:${password}`)}`;\n        } else if (options.auth.type === \"Custom\") {\n            const value = getValue(options.auth.value);\n            if (!value) {\n                return headers;\n            }\n            headers[\"authorization\"] = `${getValue(options.auth.prefix)} ${value}`;\n        }\n    }\n    return headers;\n};\n// src/utils.ts\nvar JSON_RE = /^application\\/(?:[\\w!#$%&*.^`~-]*\\+)?json(;.+)?$/i;\nfunction detectResponseType(request) {\n    const _contentType = request.headers.get(\"content-type\");\n    const textTypes = /* @__PURE__ */ new Set([\n        \"image/svg\",\n        \"application/xml\",\n        \"application/xhtml\",\n        \"application/html\"\n    ]);\n    if (!_contentType) {\n        return \"json\";\n    }\n    const contentType = _contentType.split(\";\").shift() || \"\";\n    if (JSON_RE.test(contentType)) {\n        return \"json\";\n    }\n    if (textTypes.has(contentType) || contentType.startsWith(\"text/\")) {\n        return \"text\";\n    }\n    return \"blob\";\n}\nfunction isJSONParsable(value) {\n    try {\n        JSON.parse(value);\n        return true;\n    } catch (error) {\n        return false;\n    }\n}\nfunction isJSONSerializable(value) {\n    if (value === void 0) {\n        return false;\n    }\n    const t = typeof value;\n    if (t === \"string\" || t === \"number\" || t === \"boolean\" || t === null) {\n        return true;\n    }\n    if (t !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(value)) {\n        return true;\n    }\n    if (value.buffer) {\n        return false;\n    }\n    return value.constructor && value.constructor.name === \"Object\" || typeof value.toJSON === \"function\";\n}\nfunction jsonParse(text) {\n    try {\n        return JSON.parse(text);\n    } catch (error) {\n        return text;\n    }\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction getFetch(options) {\n    if (options == null ? void 0 : options.customFetchImpl) {\n        return options.customFetchImpl;\n    }\n    if (typeof globalThis !== \"undefined\" && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    if (false) {}\n    throw new Error(\"No fetch implementation found\");\n}\nfunction isPayloadMethod(method) {\n    if (!method) {\n        return false;\n    }\n    const payloadMethod = [\n        \"POST\",\n        \"PUT\",\n        \"PATCH\",\n        \"DELETE\"\n    ];\n    return payloadMethod.includes(method.toUpperCase());\n}\nfunction isRouteMethod(method) {\n    const routeMethod = [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"PATCH\",\n        \"DELETE\"\n    ];\n    if (!method) {\n        return false;\n    }\n    return routeMethod.includes(method.toUpperCase());\n}\nasync function getHeaders(opts) {\n    const headers = new Headers(opts == null ? void 0 : opts.headers);\n    const authHeader = await getAuthHeader(opts);\n    for (const [key, value] of Object.entries(authHeader || {})){\n        headers.set(key, value);\n    }\n    if (!headers.has(\"content-type\")) {\n        const t = detectContentType(opts == null ? void 0 : opts.body);\n        if (t) {\n            headers.set(\"content-type\", t);\n        }\n    }\n    return headers;\n}\nfunction getURL(url, options) {\n    if (url.startsWith(\"@\")) {\n        const m = url.toString().split(\"@\")[1].split(\"/\")[0];\n        if (methods.includes(m)) {\n            url = url.replace(`@${m}/`, \"/\");\n        }\n    }\n    let _url;\n    try {\n        if (url.startsWith(\"http\")) {\n            _url = url;\n        } else {\n            let baseURL = options == null ? void 0 : options.baseURL;\n            if (baseURL && !(baseURL == null ? void 0 : baseURL.endsWith(\"/\"))) {\n                baseURL = baseURL + \"/\";\n            }\n            if (url.startsWith(\"/\")) {\n                _url = new URL(url.substring(1), baseURL);\n            } else {\n                _url = new URL(url, options == null ? void 0 : options.baseURL);\n            }\n        }\n    } catch (e) {\n        if (e instanceof TypeError) {\n            if (!(options == null ? void 0 : options.baseURL)) {\n                throw TypeError(`Invalid URL ${url}. Are you passing in a relative url but not setting the baseURL?`);\n            }\n            throw TypeError(`Invalid URL ${url}. Please validate that you are passing the correct input.`);\n        }\n        throw e;\n    }\n    if (options == null ? void 0 : options.params) {\n        if (Array.isArray(options == null ? void 0 : options.params)) {\n            const params = (options == null ? void 0 : options.params) ? Array.isArray(options.params) ? `/${options.params.join(\"/\")}` : `/${Object.values(options.params).join(\"/\")}` : \"\";\n            _url = _url.toString().split(\"/:\")[0];\n            _url = `${_url.toString()}${params}`;\n        } else {\n            for (const [key, value] of Object.entries(options == null ? void 0 : options.params)){\n                _url = _url.toString().replace(`:${key}`, String(value));\n            }\n        }\n    }\n    const __url = new URL(_url);\n    const queryParams = options == null ? void 0 : options.query;\n    if (queryParams) {\n        for (const [key, value] of Object.entries(queryParams)){\n            __url.searchParams.append(key, String(value));\n        }\n    }\n    return __url;\n}\nfunction detectContentType(body) {\n    if (isJSONSerializable(body)) {\n        return \"application/json\";\n    }\n    return null;\n}\nfunction getBody(options) {\n    if (!(options == null ? void 0 : options.body)) {\n        return null;\n    }\n    const headers = new Headers(options == null ? void 0 : options.headers);\n    if (isJSONSerializable(options.body) && !headers.has(\"content-type\")) {\n        for (const [key, value] of Object.entries(options == null ? void 0 : options.body)){\n            if (value instanceof Date) {\n                options.body[key] = value.toISOString();\n            }\n        }\n        return JSON.stringify(options.body);\n    }\n    return options.body;\n}\nfunction getMethod(url, options) {\n    var _a;\n    if (options == null ? void 0 : options.method) {\n        return options.method.toUpperCase();\n    }\n    if (url.startsWith(\"@\")) {\n        const pMethod = (_a = url.split(\"@\")[1]) == null ? void 0 : _a.split(\"/\")[0];\n        if (!methods.includes(pMethod)) {\n            return (options == null ? void 0 : options.body) ? \"POST\" : \"GET\";\n        }\n        return pMethod.toUpperCase();\n    }\n    return (options == null ? void 0 : options.body) ? \"POST\" : \"GET\";\n}\nfunction getTimeout(options, controller) {\n    let abortTimeout;\n    if (!(options == null ? void 0 : options.signal) && (options == null ? void 0 : options.timeout)) {\n        abortTimeout = setTimeout(()=>controller == null ? void 0 : controller.abort(), options == null ? void 0 : options.timeout);\n    }\n    return {\n        abortTimeout,\n        clearTimeout: ()=>{\n            if (abortTimeout) {\n                clearTimeout(abortTimeout);\n            }\n        }\n    };\n}\nfunction bodyParser(data, responseType) {\n    if (responseType === \"json\") {\n        return JSON.parse(data);\n    }\n    return data;\n}\nvar ValidationError = class _ValidationError extends Error {\n    constructor(issues, message){\n        super(message || JSON.stringify(issues, null, 2));\n        this.issues = issues;\n        Object.setPrototypeOf(this, _ValidationError.prototype);\n    }\n};\nasync function parseStandardSchema(schema, input) {\n    let result = await schema[\"~standard\"].validate(input);\n    if (result.issues) {\n        throw new ValidationError(result.issues);\n    }\n    return result.value;\n}\n// src/create-fetch/schema.ts\nvar methods = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"delete\"\n];\nvar createSchema = (schema, config)=>{\n    return {\n        schema,\n        config\n    };\n};\n// src/create-fetch/index.ts\nvar applySchemaPlugin = (config)=>({\n        id: \"apply-schema\",\n        name: \"Apply Schema\",\n        version: \"1.0.0\",\n        async init (url, options) {\n            var _a, _b, _c, _d;\n            const schema = ((_b = (_a = config.plugins) == null ? void 0 : _a.find((plugin)=>{\n                var _a2;\n                return ((_a2 = plugin.schema) == null ? void 0 : _a2.config) ? url.startsWith(plugin.schema.config.baseURL || \"\") || url.startsWith(plugin.schema.config.prefix || \"\") : false;\n            })) == null ? void 0 : _b.schema) || config.schema;\n            if (schema) {\n                let urlKey = url;\n                if ((_c = schema.config) == null ? void 0 : _c.prefix) {\n                    if (urlKey.startsWith(schema.config.prefix)) {\n                        urlKey = urlKey.replace(schema.config.prefix, \"\");\n                        if (schema.config.baseURL) {\n                            url = url.replace(schema.config.prefix, schema.config.baseURL);\n                        }\n                    }\n                }\n                if ((_d = schema.config) == null ? void 0 : _d.baseURL) {\n                    if (urlKey.startsWith(schema.config.baseURL)) {\n                        urlKey = urlKey.replace(schema.config.baseURL, \"\");\n                    }\n                }\n                const keySchema = schema.schema[urlKey];\n                if (keySchema) {\n                    let opts = __spreadProps(__spreadValues({}, options), {\n                        method: keySchema.method,\n                        output: keySchema.output\n                    });\n                    if (!(options == null ? void 0 : options.disableValidation)) {\n                        opts = __spreadProps(__spreadValues({}, opts), {\n                            body: keySchema.input ? await parseStandardSchema(keySchema.input, options == null ? void 0 : options.body) : options == null ? void 0 : options.body,\n                            params: keySchema.params ? await parseStandardSchema(keySchema.params, options == null ? void 0 : options.params) : options == null ? void 0 : options.params,\n                            query: keySchema.query ? await parseStandardSchema(keySchema.query, options == null ? void 0 : options.query) : options == null ? void 0 : options.query\n                        });\n                    }\n                    return {\n                        url,\n                        options: opts\n                    };\n                }\n            }\n            return {\n                url,\n                options\n            };\n        }\n    });\nvar createFetch = (config)=>{\n    async function $fetch(url, options) {\n        const opts = __spreadProps(__spreadValues(__spreadValues({}, config), options), {\n            plugins: [\n                ...(config == null ? void 0 : config.plugins) || [],\n                applySchemaPlugin(config || {})\n            ]\n        });\n        if (config == null ? void 0 : config.catchAllError) {\n            try {\n                return await betterFetch(url, opts);\n            } catch (error) {\n                return {\n                    data: null,\n                    error: {\n                        status: 500,\n                        statusText: \"Fetch Error\",\n                        message: \"Fetch related error. Captured by catchAllError option. See error property for more details.\",\n                        error\n                    }\n                };\n            }\n        }\n        return await betterFetch(url, opts);\n    }\n    return $fetch;\n};\n// src/url.ts\nfunction getURL2(url, option) {\n    let { baseURL, params, query } = option || {\n        query: {},\n        params: {},\n        baseURL: \"\"\n    };\n    let basePath = url.startsWith(\"http\") ? url.split(\"/\").slice(0, 3).join(\"/\") : baseURL || \"\";\n    if (url.startsWith(\"@\")) {\n        const m = url.toString().split(\"@\")[1].split(\"/\")[0];\n        if (methods.includes(m)) {\n            url = url.replace(`@${m}/`, \"/\");\n        }\n    }\n    if (!basePath.endsWith(\"/\")) basePath += \"/\";\n    let [path, urlQuery] = url.replace(basePath, \"\").split(\"?\");\n    const queryParams = new URLSearchParams(urlQuery);\n    for (const [key, value] of Object.entries(query || {})){\n        if (value == null) continue;\n        queryParams.set(key, String(value));\n    }\n    if (params) {\n        if (Array.isArray(params)) {\n            const paramPaths = path.split(\"/\").filter((p)=>p.startsWith(\":\"));\n            for (const [index, key] of paramPaths.entries()){\n                const value = params[index];\n                path = path.replace(key, value);\n            }\n        } else {\n            for (const [key, value] of Object.entries(params)){\n                path = path.replace(`:${key}`, String(value));\n            }\n        }\n    }\n    path = path.split(\"/\").map(encodeURIComponent).join(\"/\");\n    if (path.startsWith(\"/\")) path = path.slice(1);\n    let queryParamString = queryParams.toString();\n    queryParamString = queryParamString.length > 0 ? `?${queryParamString}`.replace(/\\+/g, \"%20\") : \"\";\n    if (!basePath.startsWith(\"http\")) {\n        return `${basePath}${path}${queryParamString}`;\n    }\n    const _url = new URL(`${path}${queryParamString}`, basePath);\n    return _url;\n}\n// src/fetch.ts\nvar betterFetch = async (url, options)=>{\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const { hooks, url: __url, options: opts } = await initializePlugins(url, options);\n    const fetch = getFetch(opts);\n    const controller = new AbortController();\n    const signal = (_a = opts.signal) != null ? _a : controller.signal;\n    const _url = getURL2(__url, opts);\n    const body = getBody(opts);\n    const headers = await getHeaders(opts);\n    const method = getMethod(__url, opts);\n    let context = __spreadProps(__spreadValues({}, opts), {\n        url: _url,\n        headers,\n        body,\n        method,\n        signal\n    });\n    for (const onRequest of hooks.onRequest){\n        if (onRequest) {\n            const res = await onRequest(context);\n            if (res instanceof Object) {\n                context = res;\n            }\n        }\n    }\n    if (\"pipeTo\" in context && typeof context.pipeTo === \"function\" || typeof ((_b = options == null ? void 0 : options.body) == null ? void 0 : _b.pipe) === \"function\") {\n        if (!(\"duplex\" in context)) {\n            context.duplex = \"half\";\n        }\n    }\n    const { clearTimeout: clearTimeout2 } = getTimeout(opts, controller);\n    let response = await fetch(context.url, context);\n    clearTimeout2();\n    const responseContext = {\n        response,\n        request: context\n    };\n    for (const onResponse of hooks.onResponse){\n        if (onResponse) {\n            const r = await onResponse(__spreadProps(__spreadValues({}, responseContext), {\n                response: ((_c = options == null ? void 0 : options.hookOptions) == null ? void 0 : _c.cloneResponse) ? response.clone() : response\n            }));\n            if (r instanceof Response) {\n                response = r;\n            } else if (r instanceof Object) {\n                response = r.response;\n            }\n        }\n    }\n    if (response.ok) {\n        const hasBody = context.method !== \"HEAD\";\n        if (!hasBody) {\n            return {\n                data: \"\",\n                error: null\n            };\n        }\n        const responseType = detectResponseType(response);\n        const successContext = {\n            data: \"\",\n            response,\n            request: context\n        };\n        if (responseType === \"json\" || responseType === \"text\") {\n            const text = await response.text();\n            const parser2 = (_d = context.jsonParser) != null ? _d : jsonParse;\n            const data = await parser2(text);\n            successContext.data = data;\n        } else {\n            successContext.data = await response[responseType]();\n        }\n        if (context == null ? void 0 : context.output) {\n            if (context.output && !context.disableValidation) {\n                successContext.data = await parseStandardSchema(context.output, successContext.data);\n            }\n        }\n        for (const onSuccess of hooks.onSuccess){\n            if (onSuccess) {\n                await onSuccess(__spreadProps(__spreadValues({}, successContext), {\n                    response: ((_e = options == null ? void 0 : options.hookOptions) == null ? void 0 : _e.cloneResponse) ? response.clone() : response\n                }));\n            }\n        }\n        if (options == null ? void 0 : options.throw) {\n            return successContext.data;\n        }\n        return {\n            data: successContext.data,\n            error: null\n        };\n    }\n    const parser = (_f = options == null ? void 0 : options.jsonParser) != null ? _f : jsonParse;\n    const responseText = await response.text();\n    const isJSONResponse = isJSONParsable(responseText);\n    const errorObject = isJSONResponse ? await parser(responseText) : null;\n    const errorContext = {\n        response,\n        responseText,\n        request: context,\n        error: __spreadProps(__spreadValues({}, errorObject), {\n            status: response.status,\n            statusText: response.statusText\n        })\n    };\n    for (const onError of hooks.onError){\n        if (onError) {\n            await onError(__spreadProps(__spreadValues({}, errorContext), {\n                response: ((_g = options == null ? void 0 : options.hookOptions) == null ? void 0 : _g.cloneResponse) ? response.clone() : response\n            }));\n        }\n    }\n    if (options == null ? void 0 : options.retry) {\n        const retryStrategy = createRetryStrategy(options.retry);\n        const _retryAttempt = (_h = options.retryAttempt) != null ? _h : 0;\n        if (await retryStrategy.shouldAttemptRetry(_retryAttempt, response)) {\n            for (const onRetry of hooks.onRetry){\n                if (onRetry) {\n                    await onRetry(responseContext);\n                }\n            }\n            const delay = retryStrategy.getDelay(_retryAttempt);\n            await new Promise((resolve)=>setTimeout(resolve, delay));\n            return await betterFetch(url, __spreadProps(__spreadValues({}, options), {\n                retryAttempt: _retryAttempt + 1\n            }));\n        }\n    }\n    if (options == null ? void 0 : options.throw) {\n        throw new BetterFetchError(response.status, response.statusText, isJSONResponse ? errorObject : responseText);\n    }\n    return {\n        data: null,\n        error: __spreadProps(__spreadValues({}, errorObject), {\n            status: response.status,\n            statusText: response.statusText\n        })\n    };\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@better-fetch/fetch/dist/index.js\n");

/***/ })

};
;